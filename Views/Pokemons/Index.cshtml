@using MVCApp.Enums
@model IEnumerable<MVCApp.Models.Pokemon>

@{
    ViewData["Title"] = "Index";

    string GetColumnHeaderColor(string sortOrder)
    {
        return ViewBag.CurrentSortOrder == sortOrder ? "active-sort-column-header" : "inactive-sort-column-header";
    }

    string GetSortOrder(string sortOrder)
    {
        if (ViewBag.CurrentSortOrder != sortOrder)
            return "";

        // special case for emtypy default sort by name
        if (ViewBag.CurrentSortOrder == "")
            return "descending";

        return ViewBag.CurrentSortOrder.Contains("desc") ? "ascending" : "descending";
    }
}

<h1>Pokemons database</h1>

<p>
    <a asp-action="Create" class="btn btn-primary">Add pokemon</a>
</p>
<table class="table">
    <thead>
        <tr class="table-primary">
            <th class="@GetColumnHeaderColor(ViewBag.NameSortParam)">
                @Html.ActionLink(
                    @Html.DisplayNameFor(model => model.Name),
                    "Index",
                    new { sortOrder = ViewBag.NameSortParam },
                    new { @class = $"column-header-name {GetSortOrder(ViewBag.NameSortParam)}" })
            </th>
            <th class="@GetColumnHeaderColor(ViewBag.TypeSortParam)">
                @Html.ActionLink(
                    @Html.DisplayNameFor(model => model.Type),
                    "Index",
                    new { sortOrder = ViewBag.TypeSortParam },
                    new { @class = $"column-header-name {GetSortOrder(ViewBag.TypeSortParam)}" })
            </th>
            <th class="@GetColumnHeaderColor(ViewBag.HealthSortParam)">
                @Html.ActionLink(
                    @Html.DisplayNameFor(model => model.Health),
                    "Index",
                    new { sortOrder = ViewBag.HealthSortParam },
                    new { @class = $"column-header-name {GetSortOrder(ViewBag.HealthSortParam)}" })
            </th>
            <th class="@GetColumnHeaderColor(ViewBag.AttackSortParam)">
                @Html.ActionLink(
                    @Html.DisplayNameFor(model => model.Attack),
                    "Index",
                    new { sortOrder = ViewBag.AttackSortParam },
                    new { @class = $"column-header-name {GetSortOrder(ViewBag.AttackSortParam)}" })
            </th>
            <th class="@GetColumnHeaderColor(ViewBag.DefenseSortParam)">
                @Html.ActionLink(
                    @Html.DisplayNameFor(model => model.Defense),
                    "Index",
                    new { sortOrder = ViewBag.DefenseSortParam },
                    new { @class = $"column-header-name {GetSortOrder(ViewBag.DefenseSortParam)}" })
            </th>
            <th class="@GetColumnHeaderColor(ViewBag.SpeedSortParam)">
                @Html.ActionLink(
                    @Html.DisplayNameFor(model => model.Speed),
                    "Index",
                    new { sortOrder = ViewBag.SpeedSortParam },
                    new { @class = $"column-header-name {GetSortOrder(ViewBag.SpeedSortParam)}" })
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>
@foreach (var item in Model) {
        <tr class="test">
            <td>
                @Html.DisplayFor(modelItem => item.Name)
            </td>
            <td>
                @{
                    var types = Pokemon.GetDistinctTypes(item.Type);
                    for (int i = 0; i < types.Length; i++)
                    {
                        <div class="type-badge" style="background-color:@Pokemon.GetBadgeColor(types[i])">@types[i]</div>
                    }
                }
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Health)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Attack)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Defense)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Speed)
            </td>
            <td>
                <a asp-action="Edit" asp-route-id="@item.Id" class="edit-icon"><i class="bi bi-pencil-fill"></i></a> |
                <a asp-action="Details" asp-route-id="@item.Id"><i class="bi bi-eye-fill"></i></a> |
                <a asp-action="Delete" asp-route-id="@item.Id" class="delete-icon"><i class="bi bi-x-square-fill"></i></a>
            </td>
        </tr>
}
    </tbody>
</table>
